# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: "3.8"

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  migration:
    container_name: migration
    image: sub-rat/go-authorization
    build:
      context: ../.
      target: final
    command:
      - /bin/server
      - migrate
      - --config=./config/config.yaml
    volumes:
      - ../config/:/config/
      - ../logs/:/logs/

  setup:
    container_name: setup
    image: sub-rat/go-authorization
    build:
      context: ../.
      target: final
    command:
      - /bin/server
      - setup
      - --config=./config/config.yaml
    volumes:
      - ../config/:/config/
      - ../logs/:/logs/
    depends_on:
      - migration

  appserver:
    container_name: appserver
    image: sub-rat/go-authorization
    build:
      context: ../.
      target: final
    command:
      - /bin/server
      - api-server
      - --config=./config/config.yaml
      - --casbin_model=./config/casbin_model.conf
    ports:
      - "2222:2222"
    volumes:
      - ../config/:/config/
      - ../logs/:/logs/
    depends_on:
      - migration
      - setup
      - redis

  redis:
    image: redis
    container_name: redis_server
    ports:
      - "6379:6379"
    restart: always

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--web.listen-address=:9100'
      - '--path.rootfs=/host'
    ports:
      - "9100:9100"
    restart: unless-stopped
    volumes:
      - '/:/host:ro'

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ../config/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yaml'
    depends_on:
      - node_exporter
      - cadvisor

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    hostname: cadvisor
    container_name: cadvisor
    platform: linux/aarch64
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "8080:8080"

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    ports:
      - "3100:3100"
    expose:
      - 3100
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ../config/loki-config.yaml:/etc/loki/local-config.yaml
    depends_on:
      - promtail

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/log:/var/log:ro
      - ../config/promtail-config.yaml:/etc/promtail/promtail-config.yaml
    command: -config.file=/etc/promtail/promtail-config.yaml
    restart: always


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

